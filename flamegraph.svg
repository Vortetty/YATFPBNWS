<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="4800" height="982" onload="init(evt)" viewBox="0 0 4800 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="4790" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="4790" y="965.00"> </text><svg id="frames" x="10" width="4780" total_samples="75941672"><g><title>[ld-linux-x86-64.so.2] (7,948,920 samples, 10.47%)</title><rect x="0.0320%" y="821" width="10.4671%" height="15" fill="rgb(227,0,7)" fg:x="24337" fg:w="7948920"/><text x="0.0945%" y="831.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (7,948,920 samples, 10.47%)</title><rect x="0.0320%" y="805" width="10.4671%" height="15" fill="rgb(217,0,24)" fg:x="24337" fg:w="7948920"/><text x="0.0945%" y="815.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (72,411 samples, 0.10%)</title><rect x="10.4038%" y="789" width="0.0954%" height="15" fill="rgb(221,193,54)" fg:x="7900846" fg:w="72411"/><text x="10.4663%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,974,397 samples, 10.50%)</title><rect x="0.0007%" y="869" width="10.5007%" height="15" fill="rgb(248,212,6)" fg:x="538" fg:w="7974397"/><text x="0.0632%" y="879.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (7,974,397 samples, 10.50%)</title><rect x="0.0007%" y="853" width="10.5007%" height="15" fill="rgb(208,68,35)" fg:x="538" fg:w="7974397"/><text x="0.0632%" y="863.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (7,950,598 samples, 10.47%)</title><rect x="0.0320%" y="837" width="10.4693%" height="15" fill="rgb(232,128,0)" fg:x="24337" fg:w="7950598"/><text x="0.0945%" y="847.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (7,974,943 samples, 10.50%)</title><rect x="0.0000%" y="885" width="10.5014%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="7974943"/><text x="0.0625%" y="895.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (7,974,946 samples, 10.50%)</title><rect x="0.0000%" y="901" width="10.5014%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7974946"/><text x="0.0625%" y="911.50">[ld-linux-x86-64.so.2]</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3,985,478 samples, 5.25%)</title><rect x="10.5014%" y="341" width="5.2481%" height="15" fill="rgb(218,30,26)" fg:x="7974946" fg:w="3985478"/><text x="10.5639%" y="351.50">&lt;core::slice::iter::Iter&lt;T&gt; as co..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="341" width="3.5841%" height="15" fill="rgb(220,122,19)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="351.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="325" width="3.5841%" height="15" fill="rgb(250,228,42)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="335.50">alloc::raw_vec::RawVec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="309" width="3.5841%" height="15" fill="rgb(240,193,28)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="319.50">alloc::raw_vec::RawVec..</text></g><g><title>alloc::raw_vec::finish_grow (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="293" width="3.5841%" height="15" fill="rgb(216,20,37)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="303.50">alloc::raw_vec::finish..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="277" width="3.5841%" height="15" fill="rgb(206,188,39)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="287.50">&lt;alloc::alloc::Global ..</text></g><g><title>alloc::alloc::Global::grow_impl (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="261" width="3.5841%" height="15" fill="rgb(217,207,13)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="271.50">alloc::alloc::Global::..</text></g><g><title>alloc::alloc::realloc (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="245" width="3.5841%" height="15" fill="rgb(231,73,38)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="255.50">alloc::alloc::realloc</text></g><g><title>__rdl_realloc (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="229" width="3.5841%" height="15" fill="rgb(225,20,46)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="239.50">__rdl_realloc</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="213" width="3.5841%" height="15" fill="rgb(210,31,41)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="223.50">std::sys::pal::unix::a..</text></g><g><title>realloc (2,721,856 samples, 3.58%)</title><rect x="15.7495%" y="197" width="3.5841%" height="15" fill="rgb(221,200,47)" fg:x="11960424" fg:w="2721856"/><text x="15.8120%" y="207.50">realloc</text></g><g><title>sysinfo::unix::linux::process::copy_from_file (10,256,692 samples, 13.51%)</title><rect x="10.5014%" y="357" width="13.5060%" height="15" fill="rgb(226,26,5)" fg:x="7974946" fg:w="10256692"/><text x="10.5639%" y="367.50">sysinfo::unix::linux::process::copy_from_file</text></g><g><title>std::ffi::os_str::OsStr::to_os_string (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="341" width="4.6738%" height="15" fill="rgb(249,33,26)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="351.50">std::ffi::os_str::OsStr::to_o..</text></g><g><title>std::sys::os_str::bytes::Slice::to_owned (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="325" width="4.6738%" height="15" fill="rgb(235,183,28)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="335.50">std::sys::os_str::bytes::Slic..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="309" width="4.6738%" height="15" fill="rgb(221,5,38)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="319.50">alloc::slice::&lt;impl [T]&gt;::to_..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="293" width="4.6738%" height="15" fill="rgb(247,18,42)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="303.50">alloc::slice::&lt;impl [T]&gt;::to_..</text></g><g><title>alloc::slice::hack::to_vec (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="277" width="4.6738%" height="15" fill="rgb(241,131,45)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="287.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="261" width="4.6738%" height="15" fill="rgb(249,31,29)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="271.50">&lt;T as alloc::slice::hack::Con..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="245" width="4.6738%" height="15" fill="rgb(225,111,53)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="255.50">alloc::vec::Vec&lt;T,A&gt;::with_ca..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="229" width="4.6738%" height="15" fill="rgb(238,160,17)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="239.50">alloc::raw_vec::RawVec&lt;T,A&gt;::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="213" width="4.6738%" height="15" fill="rgb(214,148,48)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="223.50">alloc::raw_vec::RawVec&lt;T,A&gt;::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="197" width="4.6738%" height="15" fill="rgb(232,36,49)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="207.50">&lt;alloc::alloc::Global as core..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="181" width="4.6738%" height="15" fill="rgb(209,103,24)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="191.50">alloc::alloc::Global::alloc_i..</text></g><g><title>alloc::alloc::alloc (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="165" width="4.6738%" height="15" fill="rgb(229,88,8)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="175.50">alloc::alloc::alloc</text></g><g><title>__rdl_alloc (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="149" width="4.6738%" height="15" fill="rgb(213,181,19)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="159.50">__rdl_alloc</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="133" width="4.6738%" height="15" fill="rgb(254,191,54)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="143.50">std::sys::pal::unix::alloc::&lt;..</text></g><g><title>malloc (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="117" width="4.6738%" height="15" fill="rgb(241,83,37)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="127.50">malloc</text></g><g><title>[libc.so.6] (3,549,358 samples, 4.67%)</title><rect x="19.3336%" y="101" width="4.6738%" height="15" fill="rgb(233,36,39)" fg:x="14682280" fg:w="3549358"/><text x="19.3961%" y="111.50">[libc.so.6]</text></g><g><title>sysinfo::unix::linux::process::get_status (1,817,285 samples, 2.39%)</title><rect x="24.0074%" y="357" width="2.3930%" height="15" fill="rgb(226,3,54)" fg:x="18231638" fg:w="1817285"/><text x="24.0699%" y="367.50">sysinfo::unix:..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,817,285 samples, 2.39%)</title><rect x="24.0074%" y="341" width="2.3930%" height="15" fill="rgb(245,192,40)" fg:x="18231638" fg:w="1817285"/><text x="24.0699%" y="351.50">core::option::..</text></g><g><title>core::ops::function::FnOnce::call_once (1,817,285 samples, 2.39%)</title><rect x="24.0074%" y="325" width="2.3930%" height="15" fill="rgb(238,167,29)" fg:x="18231638" fg:w="1817285"/><text x="24.0699%" y="335.50">core::ops::fun..</text></g><g><title>sysinfo::unix::linux::process::&lt;impl core::convert::From&lt;char&gt; for sysinfo::common::system::ProcessStatus&gt;::from (1,817,285 samples, 2.39%)</title><rect x="24.0074%" y="309" width="2.3930%" height="15" fill="rgb(232,182,51)" fg:x="18231638" fg:w="1817285"/><text x="24.0699%" y="319.50">sysinfo::unix:..</text></g><g><title>sysinfo::unix::linux::process::update_proc_info (14,062,516 samples, 18.52%)</title><rect x="10.5014%" y="373" width="18.5175%" height="15" fill="rgb(231,60,39)" fg:x="7974946" fg:w="14062516"/><text x="10.5639%" y="383.50">sysinfo::unix::linux::process::update_proc_info</text></g><g><title>sysinfo::unix::linux::process::update_time_and_memory (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="357" width="2.6185%" height="15" fill="rgb(208,69,12)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="367.50">sysinfo::unix::..</text></g><g><title>sysinfo::unix::linux::process::get_memory (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="341" width="2.6185%" height="15" fill="rgb(235,93,37)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="351.50">sysinfo::unix::..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="325" width="2.6185%" height="15" fill="rgb(213,116,39)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="335.50">&lt;std::fs::File ..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_end (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="309" width="2.6185%" height="15" fill="rgb(222,207,29)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="319.50">&lt;&amp;std::fs::File..</text></g><g><title>std::io::default_read_to_end (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="293" width="2.6185%" height="15" fill="rgb(206,96,30)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="303.50">std::io::defaul..</text></g><g><title>std::io::default_read_to_end::small_probe_read (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="277" width="2.6185%" height="15" fill="rgb(218,138,4)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="287.50">std::io::defaul..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="261" width="2.6185%" height="15" fill="rgb(250,191,14)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="271.50">&lt;&amp;std::fs::File..</text></g><g><title>std::sys::pal::unix::fs::File::read (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="245" width="2.6185%" height="15" fill="rgb(239,60,40)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="255.50">std::sys::pal::..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="229" width="2.6185%" height="15" fill="rgb(206,27,48)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="239.50">std::sys::pal::..</text></g><g><title>read (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="213" width="2.6185%" height="15" fill="rgb(225,35,8)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="223.50">read</text></g><g><title>[unknown] (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="197" width="2.6185%" height="15" fill="rgb(250,213,24)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="207.50">[unknown]</text></g><g><title>[unknown] (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="181" width="2.6185%" height="15" fill="rgb(247,123,22)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="191.50">[unknown]</text></g><g><title>[unknown] (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="165" width="2.6185%" height="15" fill="rgb(231,138,38)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="175.50">[unknown]</text></g><g><title>[unknown] (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="149" width="2.6185%" height="15" fill="rgb(231,145,46)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="159.50">[unknown]</text></g><g><title>[unknown] (1,988,539 samples, 2.62%)</title><rect x="26.4004%" y="133" width="2.6185%" height="15" fill="rgb(251,118,11)" fg:x="20048923" fg:w="1988539"/><text x="26.4629%" y="143.50">[unknown]</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::flatten::_{{closure}} (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="517" width="22.7852%" height="15" fill="rgb(217,147,25)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="527.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::flatten::_{{closure}}</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="501" width="22.7852%" height="15" fill="rgb(247,81,37)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="511.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="485" width="22.7852%" height="15" fill="rgb(209,12,38)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="469" width="22.7852%" height="15" fill="rgb(227,1,9)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="479.50">core::iter::adapters::filter::filter_try_fold::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="453" width="22.7852%" height="15" fill="rgb(248,47,43)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="463.50">core::iter::traits::iterator::Iterator::find_map::check::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="437" width="22.7852%" height="15" fill="rgb(221,10,30)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>sysinfo::unix::linux::process::refresh_procs::_{{closure}} (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="421" width="22.7852%" height="15" fill="rgb(210,229,1)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="431.50">sysinfo::unix::linux::process::refresh_procs::_{{closure}}</text></g><g><title>sysinfo::unix::linux::process::_get_process_data (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="405" width="22.7852%" height="15" fill="rgb(222,148,37)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="415.50">sysinfo::unix::linux::process::_get_process_data</text></g><g><title>sysinfo::unix::linux::process::retrieve_all_new_process_info (17,303,469 samples, 22.79%)</title><rect x="10.5014%" y="389" width="22.7852%" height="15" fill="rgb(234,67,33)" fg:x="7974946" fg:w="17303469"/><text x="10.5639%" y="399.50">sysinfo::unix::linux::process::retrieve_all_new_process_info</text></g><g><title>sysinfo::unix::linux::utils::PathHandler::new (3,240,953 samples, 4.27%)</title><rect x="29.0189%" y="373" width="4.2677%" height="15" fill="rgb(247,98,35)" fg:x="22037462" fg:w="3240953"/><text x="29.0814%" y="383.50">sysinfo::unix::linux::util..</text></g><g><title>std::path::Path::join (3,240,953 samples, 4.27%)</title><rect x="29.0189%" y="357" width="4.2677%" height="15" fill="rgb(247,138,52)" fg:x="22037462" fg:w="3240953"/><text x="29.0814%" y="367.50">std::path::Path::join</text></g><g><title>std::path::Path::_join (3,240,953 samples, 4.27%)</title><rect x="29.0189%" y="341" width="4.2677%" height="15" fill="rgb(213,79,30)" fg:x="22037462" fg:w="3240953"/><text x="29.0814%" y="351.50">std::path::Path::_join</text></g><g><title>std::path::Path::to_path_buf (3,240,953 samples, 4.27%)</title><rect x="29.0189%" y="325" width="4.2677%" height="15" fill="rgb(246,177,23)" fg:x="22037462" fg:w="3240953"/><text x="29.0814%" y="335.50">std::path::Path::to_path_b..</text></g><g><title>&lt;std::path::PathBuf as core::convert::From&lt;std::ffi::os_str::OsString&gt;&gt;::from (3,240,953 samples, 4.27%)</title><rect x="29.0189%" y="309" width="4.2677%" height="15" fill="rgb(230,62,27)" fg:x="22037462" fg:w="3240953"/><text x="29.0814%" y="319.50">&lt;std::path::PathBuf as cor..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (34,144 samples, 0.04%)</title><rect x="33.2866%" y="261" width="0.0450%" height="15" fill="rgb(216,154,8)" fg:x="25278415" fg:w="34144"/><text x="33.3491%" y="271.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_end (34,144 samples, 0.04%)</title><rect x="33.2866%" y="245" width="0.0450%" height="15" fill="rgb(244,35,45)" fg:x="25278415" fg:w="34144"/><text x="33.3491%" y="255.50"></text></g><g><title>std::io::default_read_to_end (34,144 samples, 0.04%)</title><rect x="33.2866%" y="229" width="0.0450%" height="15" fill="rgb(251,115,12)" fg:x="25278415" fg:w="34144"/><text x="33.3491%" y="239.50"></text></g><g><title>sysinfo::unix::linux::process::_get_stat_data (5,101,182 samples, 6.72%)</title><rect x="33.2866%" y="293" width="6.7172%" height="15" fill="rgb(240,54,50)" fg:x="25278415" fg:w="5101182"/><text x="33.3491%" y="303.50">sysinfo::unix::linux::process::_get_stat_da..</text></g><g><title>sysinfo::unix::linux::utils::get_all_data_from_file (5,101,182 samples, 6.72%)</title><rect x="33.2866%" y="277" width="6.7172%" height="15" fill="rgb(233,84,52)" fg:x="25278415" fg:w="5101182"/><text x="33.3491%" y="287.50">sysinfo::unix::linux::utils::get_all_data_f..</text></g><g><title>llseek (5,067,038 samples, 6.67%)</title><rect x="33.3316%" y="261" width="6.6723%" height="15" fill="rgb(207,117,47)" fg:x="25312559" fg:w="5067038"/><text x="33.3941%" y="271.50">llseek</text></g><g><title>[unknown] (5,067,038 samples, 6.67%)</title><rect x="33.3316%" y="245" width="6.6723%" height="15" fill="rgb(249,43,39)" fg:x="25312559" fg:w="5067038"/><text x="33.3941%" y="255.50">[unknown]</text></g><g><title>[unknown] (5,067,038 samples, 6.67%)</title><rect x="33.3316%" y="229" width="6.6723%" height="15" fill="rgb(209,38,44)" fg:x="25312559" fg:w="5067038"/><text x="33.3941%" y="239.50">[unknown]</text></g><g><title>[unknown] (5,067,038 samples, 6.67%)</title><rect x="33.3316%" y="213" width="6.6723%" height="15" fill="rgb(236,212,23)" fg:x="25312559" fg:w="5067038"/><text x="33.3941%" y="223.50">[unknown]</text></g><g><title>[unknown] (5,067,038 samples, 6.67%)</title><rect x="33.3316%" y="197" width="6.6723%" height="15" fill="rgb(242,79,21)" fg:x="25312559" fg:w="5067038"/><text x="33.3941%" y="207.50">[unknown]</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_try_fold::flatten::_{{closure}} (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="437" width="9.7868%" height="15" fill="rgb(211,96,35)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="447.50">core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_try_fold..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::flatten::_{{closure}} (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="421" width="9.7868%" height="15" fill="rgb(253,215,40)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="431.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="405" width="9.7868%" height="15" fill="rgb(211,81,21)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="415.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::ite..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="389" width="9.7868%" height="15" fill="rgb(208,190,38)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; ..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="373" width="9.7868%" height="15" fill="rgb(235,213,38)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="383.50">core::iter::adapters::filter::filter_try_fold::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="357" width="9.7868%" height="15" fill="rgb(237,122,38)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="367.50">core::iter::traits::iterator::Iterator::find_map::check::_{{clos..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="341" width="9.7868%" height="15" fill="rgb(244,218,35)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; ..</text></g><g><title>sysinfo::unix::linux::process::refresh_procs::_{{closure}} (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="325" width="9.7868%" height="15" fill="rgb(240,68,47)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="335.50">sysinfo::unix::linux::process::refresh_procs::_{{closure}}</text></g><g><title>sysinfo::unix::linux::process::_get_process_data (7,432,222 samples, 9.79%)</title><rect x="33.2866%" y="309" width="9.7868%" height="15" fill="rgb(210,16,53)" fg:x="25278415" fg:w="7432222"/><text x="33.3491%" y="319.50">sysinfo::unix::linux::process::_get_process_data</text></g><g><title>sysinfo::unix::linux::process::retrieve_all_new_process_info (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="293" width="3.0695%" height="15" fill="rgb(235,124,12)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="303.50">sysinfo::unix::lin..</text></g><g><title>sysinfo::unix::linux::process::update_proc_info (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="277" width="3.0695%" height="15" fill="rgb(224,169,11)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="287.50">sysinfo::unix::lin..</text></g><g><title>sysinfo::unix::linux::process::copy_from_file (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="261" width="3.0695%" height="15" fill="rgb(250,166,2)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="271.50">sysinfo::unix::lin..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="245" width="3.0695%" height="15" fill="rgb(242,216,29)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="255.50">alloc::vec::Vec&lt;T&gt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="229" width="3.0695%" height="15" fill="rgb(230,116,27)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="239.50">alloc::vec::Vec&lt;T,..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="213" width="3.0695%" height="15" fill="rgb(228,99,48)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="223.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="197" width="3.0695%" height="15" fill="rgb(253,11,6)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="207.50">alloc::raw_vec::Ra..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="181" width="3.0695%" height="15" fill="rgb(247,143,39)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="191.50">&lt;alloc::alloc::Glo..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="165" width="3.0695%" height="15" fill="rgb(236,97,10)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="175.50">alloc::alloc::Glob..</text></g><g><title>alloc::alloc::alloc (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="149" width="3.0695%" height="15" fill="rgb(233,208,19)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="159.50">alloc::alloc::alloc</text></g><g><title>__rdl_alloc (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="133" width="3.0695%" height="15" fill="rgb(216,164,2)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="143.50">__rdl_alloc</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="117" width="3.0695%" height="15" fill="rgb(220,129,5)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="127.50">std::sys::pal::uni..</text></g><g><title>malloc (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="101" width="3.0695%" height="15" fill="rgb(242,17,10)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="111.50">malloc</text></g><g><title>[libc.so.6] (2,331,040 samples, 3.07%)</title><rect x="40.0039%" y="85" width="3.0695%" height="15" fill="rgb(242,107,0)" fg:x="30379597" fg:w="2331040"/><text x="40.0664%" y="95.50">[libc.so.6]</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="405" width="19.5149%" height="15" fill="rgb(251,28,31)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="415.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="389" width="19.5149%" height="15" fill="rgb(233,223,10)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="399.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="373" width="19.5149%" height="15" fill="rgb(215,21,27)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="383.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="357" width="19.5149%" height="15" fill="rgb(232,23,21)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="367.50">core::iter::traits::iterator::Iterator::find_map::check::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="341" width="19.5149%" height="15" fill="rgb(244,5,23)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>sysinfo::unix::linux::process::get_all_pid_entries::_{{closure}} (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="325" width="19.5149%" height="15" fill="rgb(226,81,46)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="335.50">sysinfo::unix::linux::process::get_all_pid_entries::_{{closure}}</text></g><g><title>sysinfo::unix::linux::process::get_all_pid_entries (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="309" width="19.5149%" height="15" fill="rgb(247,70,30)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="319.50">sysinfo::unix::linux::process::get_all_pid_entries</text></g><g><title>std::fs::DirEntry::path (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="293" width="19.5149%" height="15" fill="rgb(212,68,19)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="303.50">std::fs::DirEntry::path</text></g><g><title>std::sys::pal::unix::fs::DirEntry::path (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="277" width="19.5149%" height="15" fill="rgb(240,187,13)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="287.50">std::sys::pal::unix::fs::DirEntry::path</text></g><g><title>std::path::Path::join (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="261" width="19.5149%" height="15" fill="rgb(223,113,26)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="271.50">std::path::Path::join</text></g><g><title>std::path::Path::_join (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="245" width="19.5149%" height="15" fill="rgb(206,192,2)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="255.50">std::path::Path::_join</text></g><g><title>std::path::PathBuf::push (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="229" width="19.5149%" height="15" fill="rgb(241,108,4)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="239.50">std::path::PathBuf::push</text></g><g><title>std::path::PathBuf::_push (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="213" width="19.5149%" height="15" fill="rgb(247,173,49)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="223.50">std::path::PathBuf::_push</text></g><g><title>std::ffi::os_str::OsString::push (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="197" width="19.5149%" height="15" fill="rgb(224,114,35)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="207.50">std::ffi::os_str::OsString::push</text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="181" width="19.5149%" height="15" fill="rgb(245,159,27)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="191.50">std::sys::os_str::bytes::Buf::push_slice</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="165" width="19.5149%" height="15" fill="rgb(245,172,44)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="175.50">alloc::vec::Vec&lt;T,A&gt;::extend_from_slice</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="149" width="19.5149%" height="15" fill="rgb(236,23,11)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="159.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="133" width="19.5149%" height="15" fill="rgb(205,117,38)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="143.50">alloc::vec::Vec&lt;T,A&gt;::append_elements</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="117" width="19.5149%" height="15" fill="rgb(237,72,25)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="127.50">alloc::vec::Vec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="101" width="19.5149%" height="15" fill="rgb(244,70,9)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="111.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="85" width="19.5149%" height="15" fill="rgb(217,125,39)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="95.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="69" width="19.5149%" height="15" fill="rgb(235,36,10)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="79.50">alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized</text></g><g><title>alloc::raw_vec::finish_grow (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="53" width="19.5149%" height="15" fill="rgb(251,123,47)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="63.50">alloc::raw_vec::finish_grow</text></g><g><title>realloc (14,819,956 samples, 19.51%)</title><rect x="43.0734%" y="37" width="19.5149%" height="15" fill="rgb(221,13,13)" fg:x="32710637" fg:w="14819956"/><text x="43.1359%" y="47.50">realloc</text></g><g><title>core::iter::traits::iterator::Iterator::collect (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="709" width="52.0881%" height="15" fill="rgb(238,131,9)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="719.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="693" width="52.0881%" height="15" fill="rgb(211,50,8)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="677" width="52.0881%" height="15" fill="rgb(245,182,24)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="661" width="52.0881%" height="15" fill="rgb(242,14,37)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="645" width="52.0881%" height="15" fill="rgb(246,228,12)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="655.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="629" width="52.0881%" height="15" fill="rgb(213,55,15)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="639.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="613" width="52.0881%" height="15" fill="rgb(209,9,3)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="623.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="597" width="52.0881%" height="15" fill="rgb(230,59,30)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="607.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="581" width="52.0881%" height="15" fill="rgb(209,121,21)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="591.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="565" width="52.0881%" height="15" fill="rgb(220,109,13)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="575.50">&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="549" width="52.0881%" height="15" fill="rgb(232,18,1)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="559.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_try_fold (39,556,590 samples, 52.09%)</title><rect x="10.5014%" y="533" width="52.0881%" height="15" fill="rgb(215,41,42)" fg:x="7974946" fg:w="39556590"/><text x="10.5639%" y="543.50">core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_try_fold</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22,253,121 samples, 29.30%)</title><rect x="33.2866%" y="517" width="29.3029%" height="15" fill="rgb(224,123,36)" fg:x="25278415" fg:w="22253121"/><text x="33.3491%" y="527.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::try_fold (22,253,121 samples, 29.30%)</title><rect x="33.2866%" y="501" width="29.3029%" height="15" fill="rgb(240,125,3)" fg:x="25278415" fg:w="22253121"/><text x="33.3491%" y="511.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22,253,121 samples, 29.30%)</title><rect x="33.2866%" y="485" width="29.3029%" height="15" fill="rgb(205,98,50)" fg:x="25278415" fg:w="22253121"/><text x="33.3491%" y="495.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (22,253,121 samples, 29.30%)</title><rect x="33.2866%" y="469" width="29.3029%" height="15" fill="rgb(205,185,37)" fg:x="25278415" fg:w="22253121"/><text x="33.3491%" y="479.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (22,253,121 samples, 29.30%)</title><rect x="33.2866%" y="453" width="29.3029%" height="15" fill="rgb(238,207,15)" fg:x="25278415" fg:w="22253121"/><text x="33.3491%" y="463.50">core::iter::adapters::map::map_try_fold::_{{closure}}</text></g><g><title>sysinfo::unix::linux::process::refresh_procs::_{{closure}} (14,820,899 samples, 19.52%)</title><rect x="43.0734%" y="437" width="19.5162%" height="15" fill="rgb(213,199,42)" fg:x="32710637" fg:w="14820899"/><text x="43.1359%" y="447.50">sysinfo::unix::linux::process::refresh_procs::_{{closure}}</text></g><g><title>sysinfo::unix::linux::process::get_all_pid_entries (14,820,899 samples, 19.52%)</title><rect x="43.0734%" y="421" width="19.5162%" height="15" fill="rgb(235,201,11)" fg:x="32710637" fg:w="14820899"/><text x="43.1359%" y="431.50">sysinfo::unix::linux::process::get_all_pid_entries</text></g><g><title>sysinfo::common::system::System::new_with_specifics (41,416,239 samples, 54.54%)</title><rect x="10.5014%" y="789" width="54.5369%" height="15" fill="rgb(207,46,11)" fg:x="7974946" fg:w="41416239"/><text x="10.5639%" y="799.50">sysinfo::common::system::System::new_with_specifics</text></g><g><title>sysinfo::common::system::System::refresh_specifics (41,416,239 samples, 54.54%)</title><rect x="10.5014%" y="773" width="54.5369%" height="15" fill="rgb(241,35,35)" fg:x="7974946" fg:w="41416239"/><text x="10.5639%" y="783.50">sysinfo::common::system::System::refresh_specifics</text></g><g><title>sysinfo::common::system::System::refresh_processes_specifics (41,416,239 samples, 54.54%)</title><rect x="10.5014%" y="757" width="54.5369%" height="15" fill="rgb(243,32,47)" fg:x="7974946" fg:w="41416239"/><text x="10.5639%" y="767.50">sysinfo::common::system::System::refresh_processes_specifics</text></g><g><title>sysinfo::unix::linux::system::SystemInner::refresh_processes_specifics (41,416,239 samples, 54.54%)</title><rect x="10.5014%" y="741" width="54.5369%" height="15" fill="rgb(247,202,23)" fg:x="7974946" fg:w="41416239"/><text x="10.5639%" y="751.50">sysinfo::unix::linux::system::SystemInner::refresh_processes_specifics</text></g><g><title>sysinfo::unix::linux::process::refresh_procs (41,416,239 samples, 54.54%)</title><rect x="10.5014%" y="725" width="54.5369%" height="15" fill="rgb(219,102,11)" fg:x="7974946" fg:w="41416239"/><text x="10.5639%" y="735.50">sysinfo::unix::linux::process::refresh_procs</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="709" width="2.4488%" height="15" fill="rgb(243,110,44)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="719.50">std::collectio..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="693" width="2.4488%" height="15" fill="rgb(222,74,54)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="703.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="677" width="2.4488%" height="15" fill="rgb(216,99,12)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="687.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="661" width="2.4488%" height="15" fill="rgb(226,22,26)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="671.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="645" width="2.4488%" height="15" fill="rgb(217,163,10)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="655.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="629" width="2.4488%" height="15" fill="rgb(213,25,53)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="639.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="613" width="2.4488%" height="15" fill="rgb(252,105,26)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="623.50">hashbrown::raw..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="597" width="2.4488%" height="15" fill="rgb(220,39,43)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="607.50">core::intrinsi..</text></g><g><title>[unknown] (1,859,649 samples, 2.45%)</title><rect x="62.5895%" y="581" width="2.4488%" height="15" fill="rgb(229,68,48)" fg:x="47531536" fg:w="1859649"/><text x="62.6520%" y="591.50">[unknown]</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,155,109 samples, 12.06%)</title><rect x="65.0383%" y="437" width="12.0554%" height="15" fill="rgb(252,8,32)" fg:x="49391185" fg:w="9155109"/><text x="65.1008%" y="447.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate</text></g><g><title>alloc::alloc::dealloc (9,155,109 samples, 12.06%)</title><rect x="65.0383%" y="421" width="12.0554%" height="15" fill="rgb(223,20,43)" fg:x="49391185" fg:w="9155109"/><text x="65.1008%" y="431.50">alloc::alloc::dealloc</text></g><g><title>__rdl_dealloc (9,155,109 samples, 12.06%)</title><rect x="65.0383%" y="405" width="12.0554%" height="15" fill="rgb(229,81,49)" fg:x="49391185" fg:w="9155109"/><text x="65.1008%" y="415.50">__rdl_dealloc</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,155,109 samples, 12.06%)</title><rect x="65.0383%" y="389" width="12.0554%" height="15" fill="rgb(236,28,36)" fg:x="49391185" fg:w="9155109"/><text x="65.1008%" y="399.50">std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::all..</text></g><g><title>cfree (9,155,109 samples, 12.06%)</title><rect x="65.0383%" y="373" width="12.0554%" height="15" fill="rgb(249,185,26)" fg:x="49391185" fg:w="9155109"/><text x="65.1008%" y="383.50">cfree</text></g><g><title>[libc.so.6] (9,155,109 samples, 12.06%)</title><rect x="65.0383%" y="357" width="12.0554%" height="15" fill="rgb(249,174,33)" fg:x="49391185" fg:w="9155109"/><text x="65.1008%" y="367.50">[libc.so.6]</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,414,696 samples, 16.35%)</title><rect x="65.0383%" y="549" width="16.3477%" height="15" fill="rgb(233,201,37)" fg:x="49391185" fg:w="12414696"/><text x="65.1008%" y="559.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[std::ffi::os_str::OsString]&gt; (12,414,696 samples, 16.35%)</title><rect x="65.0383%" y="533" width="16.3477%" height="15" fill="rgb(221,78,26)" fg:x="49391185" fg:w="12414696"/><text x="65.1008%" y="543.50">core::ptr::drop_in_place&lt;[std::ffi::os_str::OsString]&gt;</text></g><g><title>core::ptr::drop_in_place&lt;std::ffi::os_str::OsString&gt; (12,414,696 samples, 16.35%)</title><rect x="65.0383%" y="517" width="16.3477%" height="15" fill="rgb(250,127,30)" fg:x="49391185" fg:w="12414696"/><text x="65.1008%" y="527.50">core::ptr::drop_in_place&lt;std::ffi::os_str::OsString&gt;</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::os_str::bytes::Buf&gt; (12,414,696 samples, 16.35%)</title><rect x="65.0383%" y="501" width="16.3477%" height="15" fill="rgb(230,49,44)" fg:x="49391185" fg:w="12414696"/><text x="65.1008%" y="511.50">core::ptr::drop_in_place&lt;std::sys::os_str::bytes::Buf&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12,414,696 samples, 16.35%)</title><rect x="65.0383%" y="485" width="16.3477%" height="15" fill="rgb(229,67,23)" fg:x="49391185" fg:w="12414696"/><text x="65.1008%" y="495.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12,414,696 samples, 16.35%)</title><rect x="65.0383%" y="469" width="16.3477%" height="15" fill="rgb(249,83,47)" fg:x="49391185" fg:w="12414696"/><text x="65.1008%" y="479.50">core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt;</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,414,696 samples, 16.35%)</title><rect x="65.0383%" y="453" width="16.3477%" height="15" fill="rgb(215,43,3)" fg:x="49391185" fg:w="12414696"/><text x="65.1008%" y="463.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3,259,587 samples, 4.29%)</title><rect x="77.0938%" y="437" width="4.2922%" height="15" fill="rgb(238,154,13)" fg:x="58546294" fg:w="3259587"/><text x="77.1563%" y="447.50">alloc::raw_vec::RawVec&lt;T,A&gt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::ffi::os_str::OsString&gt;&gt; (24,939,228 samples, 32.84%)</title><rect x="65.0383%" y="565" width="32.8400%" height="15" fill="rgb(219,56,2)" fg:x="49391185" fg:w="24939228"/><text x="65.1008%" y="575.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::ffi::os_str::OsString&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;std::ffi::os_str::OsString&gt;&gt; (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="549" width="16.4923%" height="15" fill="rgb(233,0,4)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="559.50">core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;std::ffi::os_str::OsString&gt;&gt;</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="533" width="16.4923%" height="15" fill="rgb(235,30,7)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="543.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="517" width="16.4923%" height="15" fill="rgb(250,79,13)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="527.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate</text></g><g><title>alloc::alloc::dealloc (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="501" width="16.4923%" height="15" fill="rgb(211,146,34)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="511.50">alloc::alloc::dealloc</text></g><g><title>__rdl_dealloc (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="485" width="16.4923%" height="15" fill="rgb(228,22,38)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="495.50">__rdl_dealloc</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="469" width="16.4923%" height="15" fill="rgb(235,168,5)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="479.50">std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc</text></g><g><title>cfree (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="453" width="16.4923%" height="15" fill="rgb(221,155,16)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="463.50">cfree</text></g><g><title>[libc.so.6] (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="437" width="16.4923%" height="15" fill="rgb(215,215,53)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="447.50">[libc.so.6]</text></g><g><title>[libc.so.6] (12,524,532 samples, 16.49%)</title><rect x="81.3860%" y="421" width="16.4923%" height="15" fill="rgb(223,4,10)" fg:x="61805881" fg:w="12524532"/><text x="81.4485%" y="431.50">[libc.so.6]</text></g><g><title>[libc.so.6] (3,467,501 samples, 4.57%)</title><rect x="93.3123%" y="405" width="4.5660%" height="15" fill="rgb(234,103,6)" fg:x="70862912" fg:w="3467501"/><text x="93.3748%" y="415.50">[libc.so.6]</text></g><g><title>all (75,941,672 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="75941672"/><text x="0.0625%" y="943.50"></text></g><g><title>yatfpbnws (75,941,672 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="75941672"/><text x="0.0625%" y="927.50">yatfpbnws</text></g><g><title>_start (67,966,726 samples, 89.50%)</title><rect x="10.5014%" y="901" width="89.4986%" height="15" fill="rgb(228,201,54)" fg:x="7974946" fg:w="67966726"/><text x="10.5639%" y="911.50">_start</text></g><g><title>__libc_start_main (67,966,726 samples, 89.50%)</title><rect x="10.5014%" y="885" width="89.4986%" height="15" fill="rgb(222,22,37)" fg:x="7974946" fg:w="67966726"/><text x="10.5639%" y="895.50">__libc_start_main</text></g><g><title>[libc.so.6] (67,966,726 samples, 89.50%)</title><rect x="10.5014%" y="869" width="89.4986%" height="15" fill="rgb(237,53,32)" fg:x="7974946" fg:w="67966726"/><text x="10.5639%" y="879.50">[libc.so.6]</text></g><g><title>main (67,966,726 samples, 89.50%)</title><rect x="10.5014%" y="853" width="89.4986%" height="15" fill="rgb(233,25,53)" fg:x="7974946" fg:w="67966726"/><text x="10.5639%" y="863.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (67,966,726 samples, 89.50%)</title><rect x="10.5014%" y="837" width="89.4986%" height="15" fill="rgb(210,40,34)" fg:x="7974946" fg:w="67966726"/><text x="10.5639%" y="847.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (67,966,726 samples, 89.50%)</title><rect x="10.5014%" y="821" width="89.4986%" height="15" fill="rgb(241,220,44)" fg:x="7974946" fg:w="67966726"/><text x="10.5639%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>yatfpbnws::main (67,966,726 samples, 89.50%)</title><rect x="10.5014%" y="805" width="89.4986%" height="15" fill="rgb(235,28,35)" fg:x="7974946" fg:w="67966726"/><text x="10.5639%" y="815.50">yatfpbnws::main</text></g><g><title>yatfpbnws::shell::get_shell (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="789" width="34.9617%" height="15" fill="rgb(210,56,17)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="799.50">yatfpbnws::shell::get_shell</text></g><g><title>core::ptr::drop_in_place&lt;sysinfo::common::system::System&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="773" width="34.9617%" height="15" fill="rgb(224,130,29)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="783.50">core::ptr::drop_in_place&lt;sysinfo::common::system::System&gt;</text></g><g><title>core::ptr::drop_in_place&lt;sysinfo::unix::linux::system::SystemInner&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="757" width="34.9617%" height="15" fill="rgb(235,212,8)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="767.50">core::ptr::drop_in_place&lt;sysinfo::unix::linux::system::SystemInner&gt;</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;sysinfo::common::system::Pid,sysinfo::common::system::Process&gt;&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="741" width="34.9617%" height="15" fill="rgb(223,33,50)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="751.50">core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;sysinfo::common::system::Pid,sysinfo::common::system::Process&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;sysinfo::common::system::Pid,sysinfo::common::system::Process,std::hash::random::RandomState&gt;&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="725" width="34.9617%" height="15" fill="rgb(219,149,13)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="735.50">core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;sysinfo::common::system::Pid,sysinfo::common::system::Process,std::hash::random::RandomState&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(sysinfo::common::system::Pid,sysinfo::common::system::Process)&gt;&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="709" width="34.9617%" height="15" fill="rgb(250,156,29)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="719.50">core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(sysinfo::common::system::Pid,sysinfo::common::system::Process)&gt;&gt;</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="693" width="34.9617%" height="15" fill="rgb(216,193,19)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="703.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="677" width="34.9617%" height="15" fill="rgb(216,135,14)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="687.50">hashbrown::raw::RawTableInner::drop_inner_table</text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="661" width="34.9617%" height="15" fill="rgb(241,47,5)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="671.50">hashbrown::raw::RawTableInner::drop_elements</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="645" width="34.9617%" height="15" fill="rgb(233,42,35)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="655.50">hashbrown::raw::Bucket&lt;T&gt;::drop</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="629" width="34.9617%" height="15" fill="rgb(231,13,6)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="639.50">core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place</text></g><g><title>core::ptr::drop_in_place&lt;(sysinfo::common::system::Pid,sysinfo::common::system::Process)&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="613" width="34.9617%" height="15" fill="rgb(207,181,40)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="623.50">core::ptr::drop_in_place&lt;(sysinfo::common::system::Pid,sysinfo::common::system::Process)&gt;</text></g><g><title>core::ptr::drop_in_place&lt;sysinfo::common::system::Process&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="597" width="34.9617%" height="15" fill="rgb(254,173,49)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="607.50">core::ptr::drop_in_place&lt;sysinfo::common::system::Process&gt;</text></g><g><title>core::ptr::drop_in_place&lt;sysinfo::unix::linux::process::ProcessInner&gt; (26,550,487 samples, 34.96%)</title><rect x="65.0383%" y="581" width="34.9617%" height="15" fill="rgb(221,1,38)" fg:x="49391185" fg:w="26550487"/><text x="65.1008%" y="591.50">core::ptr::drop_in_place&lt;sysinfo::unix::linux::process::ProcessInner&gt;</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::path::PathBuf&gt;&gt; (1,611,259 samples, 2.12%)</title><rect x="97.8783%" y="565" width="2.1217%" height="15" fill="rgb(206,124,46)" fg:x="74330413" fg:w="1611259"/><text x="97.9408%" y="575.50">core::ptr::d..</text></g></svg></svg>